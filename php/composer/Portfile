# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0

name                    composer
version                 1.6.3
revision                6
categories              php www net devel
platforms               darwin freebsd openbsd
maintainers             gmail.com:stephan.jorek openmaintainer
license                 MIT
homepage                http://getcomposer.org
master_sites            ${homepage}
distname                installer
extract.suffix
checksums               rmd160  da67082b8e9e0261abc7bc79e8218447009cdfe3 \
                        sha256  c6d3f7f9e650e6eb5bba8a4f2a569b23c5b5fe10ec75fbc79c5cec21064c7e4f \
                        sha384  544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061

description             Package Management for PHP
long_description        Composer is a dependency manager tracking local \
                        dependencies of your projects and libraries.

build.args              --no-ansi
destroot.args           ${build.args} --quiet

# composer.create_subports: creates subports for each composer instance

proc composer.create_subports {} {

    global filespath name prefix worksrcpath

    foreach php {php php53 php54 php55 php56 php70 php71 php72} {

        set libpath                             "/lib/${php}"

        if {"${php}" eq "php"} {
            set php_bin                         "${php}"
        } else {
            set php_bin                         "${prefix}/bin/${php}"
        }

        eval [subst {

            subport composer-${php} {

                PortGroup                       select 1.0

                depends_run                     port:composer_select
                select.group                    composer

                if {"${php}" eq "php"} {
                    select.file                 "${filespath}/apple-${php}"

                    depends_build               "bin:${php}:php"
                    depends_run-append          "bin:${php}:php"

                } else {
                    select.file                 "${filespath}/macports-${php}"

                    depends_build               "port:${php}"
                    depends_run-append          "port:${php}"

                    build.args-append           --disable-tls
                    destroot.args-append        --disable-tls
                }

                composer.add_port_code "${php}" "${libpath}" "${php_bin}"

                if {"${php}" eq "php"} {

                    default_variants            +bash_completion

                } else {

                    variant iconv description {Utilize iconv extension} {
                        depends_build-append    "port:${php}-iconv"
                        depends_run-append      "port:${php}-iconv"
                    }

                    variant mbstring description {Utilize mbstring extension} {
                        depends_build-append    "port:${php}-mbstring"
                        depends_run-append      "port:${php}-mbstring"
                    }

                    variant openssl description {Utilize openssl extension} {
                        depends_build-append    "port:${php}-openssl"
                        depends_run-append      "port:${php}-openssl"
                        build.args-delete       "--disable-tls"
                        destroot.args-delete    "--disable-tls"
                    }

                    default_variants            +iconv +mbstring +openssl +bash_completion

                    if {![variant_isset iconv] && ![variant_isset mbstring]} {
                        variant_set             iconv
                    }
                }
            }

        }]
    }
}

# composer.add_port_code: adds the code to the port or subport to do the actual
# building.

proc composer.add_port_code {php libpath php_bin} {

    ui_debug "${php} ${libpath} ${php_bin}"

    global build.args destroot destroot.args distpath distname filespath
    global name prefix version
    global worksrcdir worksrcpath

    worksrcdir                      ${name}-${php}-${version}

    extract.mkdir                   yes
    extract {
        xinstall -m 0644 ${distpath}/${distname} ${worksrcpath}/composer-setup.php
    }

    use_configure                   no

    options build.php_bin
    build.php_bin                   ${php_bin}

    build {
        ui_info "Composer setup check: ${build.php_bin} ${worksrcpath}/composer-setup.php --check ${build.args}"
        set setup_check [exec ${build.php_bin}  ${worksrcpath}/composer-setup.php --check ${build.args}]

        if {"${setup_check}" eq "All settings correct for using Composer"} {
            ui_info "${setup_check}."
        } else {
            ui_info "${setup_check}"
            return -code error "Composer setup check failed."
        }
    }

    options destroot.php destroot.php_bin destroot.libpath
    destroot.php                    ${php}
    destroot.php_bin                ${php_bin}
    destroot.libpath                ${libpath}

    destroot {
        set destroot_binpath        ${destroot}${prefix}/bin
        set destroot_libpath        ${destroot}${prefix}${destroot.libpath}
        set destroot_wrapper        ${destroot_binpath}/${name}-${destroot.php}
        set composer_install        "${destroot.php_bin} ${worksrcpath}/composer-setup.php --install-dir=${worksrcpath} --version=${version} ${destroot.args}"

        ui_info "Downloading composer: ${composer_install}"
        system "${composer_install}"

        xinstall -d -m 0755 ${destroot_binpath}
        xinstall -d -m 0755 ${destroot_libpath}
        xinstall -m 0644 ${worksrcpath}/composer-setup.php ${destroot_libpath}/composer-setup.php
        xinstall -m 0644 ${worksrcpath}/composer.phar ${destroot_libpath}/composer.phar
        xinstall -m 0755 ${filespath}/${name}.sh ${destroot_wrapper}
        reinplace "s,@PHP@,${destroot.php_bin},g" ${destroot_wrapper}
        reinplace "s,@LIBPATH@,${prefix}${destroot.libpath},g" ${destroot_wrapper}
        if {"${destroot.php}" eq "php"} {
            reinplace "s,@VARIANT@,,g" ${destroot_wrapper}
        } else {
            reinplace "s,@VARIANT@,/${destroot.php},g" ${destroot_wrapper}
        }
    }

    variant bash_completion description {Enable bash autocompletion} {
        depends_run-append          port:composer-bash-completion

        post-destroot {
            set completion_destroot     ${destroot}${prefix}/share/bash-completion/completions
            set completion_scriptname   ${name}-${destroot.php}
            set completion_libpath      ${prefix}/lib/composer-bash-completion

            xinstall -d -m 0755 ${completion_destroot}
            xinstall -m 0644 ${filespath}/completion.sh ${completion_destroot}/${completion_scriptname}
            reinplace "s,@PHP@,${destroot.php_bin},g" ${completion_destroot}/${completion_scriptname}
            reinplace "s,@NAME@,${completion_scriptname},g" ${completion_destroot}/${completion_scriptname}
            reinplace "s,@LIBPATH@,${completion_libpath},g" ${completion_destroot}/${completion_scriptname}
        }
    }
}

composer.create_subports

if {${name} eq ${subport}} {
    supported_archs                 noarch
    distfiles
    use_configure                   no
    build {}
    destroot {
        xinstall -d -m 755 ${destroot}${prefix}/share/doc/${name}
        system "echo \"${name} is a stub port\" > ${destroot}${prefix}/share/doc/${name}/README"
        notes "
-------------
This is just a stub port providing nothing.
Install one of the subports 'composer-php*'.
-------------
"
    }

}

default livecheck.type  {regex}
livecheck.url           https://getcomposer.org/versions
livecheck.regex         {\"stable\"[^\]]*\"version\": \"(\d+(\.\d+)*)\"}
